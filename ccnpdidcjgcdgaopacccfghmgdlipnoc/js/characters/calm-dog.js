import {Character, sharedCharacterStyles} from "./character.js";
import {
    defineCustomElement,
    createHTML,
    promisifyAnimation,
    getRandomPositionOnElement,
    getElementFromPoint, isDestructible, wait
} from "../util.js";
import {CHARACTERS, TOP_Z_INDEX} from "../../config.js";
import "../eye.js";
import "../fire.js";

const BURNING_CLASS = "burning";
const MAX_FIRE_RECURSION_DEPTH = 20;
const MAX_FIRE_COUNT = 30;
const FIRE_CRAWL_PIXELS = 100;
const SQUEAK_CHANCE = 0.03;

/**
 * Creates a fire element.
 * @param {*} targetCenter
 */
function createFireElement(targetCenter) {
    const randomSize = 0.3 + Math.random();
    const randomFireDuration = 500 + (2000 * Math.random());
    const $fire = document.createElement("laser-cat-fire");
    $fire.classList.add("fire");
    Object.assign($fire.style, {
        position: `fixed`,
        left: `${targetCenter.x}px`,
        top: `${targetCenter.y}px`,
        zIndex: TOP_Z_INDEX - 1,
        pointerEvents: `none`,
        transformOrigin: `center`,
        boxSizing: "border-box",
        transform: `translate(-50%, -50%) scale(${randomSize})`
    });

    $fire.style.setProperty("--fire-duration", `${randomFireDuration}ms`);

    return $fire;
}


/** Template for the question hound */
const template = document.createElement("template");
template.innerHTML = createHTML(`
	<style>
		${sharedCharacterStyles}
		
		:host([active]) {
	        transform: translateY(25%);	
		}
		
		.eye.left {
            left: 52px;
            top: 73px;
            transform: scaleY(1.3);
    	}
    	
		.eye.right {
            left: 94px;
            top: 55px;
            transform: scaleY(1.1);
        }

		#dog {
			width: 170px;
		}
		
		#body-background, #body-leg-left, #body-arm-right, #body-background, #body-leg-right, #body-background, #nose-background, #hat-front, #hat-back-background {
			fill: var(--dog-bg, #D18F29);	
		}
		
		#nose-dark, #hat-back-dark, #ear {
			fill: var(--dog-mark, #000000);	
		}
		
		#speech-bubble {
          position: absolute;
          bottom: 100%;
          width: 250px;
          left: 0;
          opacity: 0;
          transform-origin: bottom center;
          pointer-events: none;;
		}

	</style>
	<div id="head">
	    <laser-cat-eye class="eye left"></laser-cat-eye>
	    <laser-cat-eye class="eye right"></laser-cat-eye>
    </div>
    <svg id="dog" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" preserveAspectRatio="none" width="100%" height="100%" viewBox="0 0 433 546">
      <defs>
        <path d="M108.802 61.518C76.48 7.583 46.564-10.478 19.057 7.336-8.45 25.149-4.803 61.406 30 116.107l78.802-54.589Z" id="path-1"/>
      </defs>
      <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
        <g transform="translate(0 4)">
          <g id="body" transform="translate(52 74)">
            <path id="body-background" fill="#D18F29" d="M120.009 390 180 351.691 87.335 114 25 293.143l42.337 89.412z"/>
            <path d="M226 371.018c6.18 7.429 10.296 18.092 12.348 31.992 2.053 13.899 2.053 26.861 0 38.887 15.277 4.452 26.27 5.99 32.981 4.617 25.986-5.32 41.24-24.089 38.314-39.045-4.059-20.749-21.186-18.597-51.382 6.454l15.416-11.932c-1.143-16.026-3.915-27.327-8.316-33.9-4.4-6.575-14.463-10.938-30.186-13.091L226 371.018Z" id="body-leg-right" stroke="#000000" stroke-width="4" fill="#D18F2A" stroke-linecap="round" stroke-linejoin="round"/>
            <path d="M90.514 11.29c23.823-15.054 53.59-15.054 89.303 0 53.569 22.583 70.243 112.704 56.706 164.263-6.42 24.454-21.038 53.535-14.515 76.083 6.523 22.548 5.253 41.352 8.802 67.407 6.751 49.564-20.627 58.416-50.993 63.848-20.244 3.622-30.693-1.627-31.347-15.746-23.865.947-40.479-4.952-49.842-17.698-9.362-12.746-14.905-37.01-16.628-72.791" id="body-background" stroke="#000000" stroke-width="4" fill="#D18F29" stroke-linecap="round" stroke-linejoin="round"/>
            <path d="M227 271c10.875 14.653 17.455 26.759 19.742 36.316 2.286 9.558 3.37 27.15 3.249 52.775-30.66 21.467-45.991 25.574-45.991 12.32 0-13.252 10.164-21.216 30.49-23.891-6.37 2.534-8.867-4.266-7.49-20.402 1.377-16.136 1.377-35.175 0-57.118Z" id="body-arm-right" stroke="#000000" stroke-width="4" fill="#D18F29" stroke-linecap="round" stroke-linejoin="round"/>
            <path d="M57.757 275.08c1.006 38.134 5.48 64.369 13.42 78.705 7.94 14.337 21.196 21.545 39.77 21.626 35.253-14.417 59.776-17.354 73.572-8.81 13.795 8.544 20.571 27.582 20.328 57.114l-14.645 9.868 14.645-9.868c19.803-9.859 30.496-7.101 32.08 8.273 2.375 23.061-53.858 36.257-65.764 33.697-5.984-1.287-11.473-13.3-14.164-32.102-2.692-18.803-2.692-35.315-6.124-37.543-6.9-4.479-58.095 31.697-110.607-9.589-35.007-27.523-47.19-83.853-36.545-168.989L57.757 19.547 114.41 0" id="body-leg-left" stroke="#000000" stroke-width="4" fill="#D18F29" stroke-linecap="round" stroke-linejoin="round"/>
            <path d="M87 296c3.496-1.835 5.932-3.923 7.31-6.264 1.376-2.34 2.273-5.92 2.69-10.736" id="body-armpit" stroke="#000000" stroke-width="4" stroke-linecap="round" stroke-linejoin="round"/>
          </g>
          <g id="head-left-eye" transform="translate(115 152)">
            <ellipse id="head-left-eye-background" stroke="#000000" stroke-width="4" fill="#FFFFFF" cx="46" cy="58" rx="46" ry="58"/>
          </g>
          <g id="head-right-eye" transform="translate(215 116)">
            <ellipse id="head-right-eye-background" stroke="#000000" stroke-width="4" fill="#FFFFFF" cx="48.5" cy="55" rx="48.5" ry="55"/>
          </g>
          <g id="nose" transform="translate(231 179)">
            <path d="M0 57.566C25.407 31.189 59.678 18 102.813 18c64.703 0 96.193 35.933 50.773 81.311-30.28 30.252-73.214 30.252-128.802 0" id="nose-background" stroke="#000000" stroke-width="4" fill="#D18F29"/>
            <ellipse id="nose-dark" fill="#000000" transform="rotate(-8 147.5 45.5)" cx="147.5" cy="45.5" rx="53.5" ry="37.5"/>
          </g>
          <path d="M232 284c12.644-2.596 21.212-5.829 25.704-9.697 4.493-3.868 7.924-10.97 10.296-21.303" id="mouth" stroke="#000000" stroke-width="4" stroke-linecap="round" stroke-linejoin="round"/>
          <path d="M103.636 112c7.263 83.211 2.765 141.078-13.494 173.602-24.388 48.784-81.741 30.512-87.486 3.076-5.744-27.436-6.131-66.801 40.853-101.474C74.832 164.088 94.874 139.02 103.636 112Z" id="ear" fill="#000000"/>
          <g id="hat-back" transform="translate(68)">
            <mask id="mask-2" fill="white">
              <use xlink:href="#path-1"/>
            </mask>
            <path stroke="#000000" stroke-width="4" d="m111.48 62.096-82.051 56.84-1.117-1.755C-7.003 61.672-10.766 24.266 17.97 5.657c28.768-18.63 59.72.057 92.548 54.833l.962 1.606Z"/>
            <path id="hat-back-background" fill="#D18F29" mask="url(#mask-2)" d="M-44-12h185v156H-44z"/>
            <path d="M-6.251 88.595c9.517-16.538 26.069-30.639 49.655-42.303 23.587-11.665 49.597-14.594 78.03-8.79l25.153 41.876-65.513 57.324-56.377 3.183-30.948-51.29Z" id="hat-back-dark" fill="#000000" mask="url(#mask-2)"/>
          </g>
          <path d="M156.313 119.499c55.718-27.632 60.487-80.757 34.465-90.867s-24.78 29.231-57.354 49.825-77.05-12.188-81.194 20.89c-4.144 33.077 48.365 47.784 104.083 20.152Z" id="hat-front" stroke="#000000" stroke-width="4" fill="#D18F29"/>
        </g>
      </g>
    </svg>
    
<svg id="speech-bubble" width="100%" height="100%" viewBox="0 0 818 584" xmlns="http://www.w3.org/2000/svg">
  <g id="this-is-fine" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
    <path d="M318.64 565.389c28.602-24.13 48.45-46.741 59.559-67.722 13.064-24.67 22.122-62.318 27.002-112.816l.606-6.275 6.29.414c175.693 11.556 289.893-7.532 342.208-56.28 80.197-74.73 75.497-164.088-17.16-239.289-45.212-36.693-109.19-59.924-187.88-70.442-69.269-9.26-148.32-8.39-230.15 1.23C232.53 24.387 152.694 46.292 96.055 78.81c-68.06 39.079-99.444 90.986-86.82 156.697 18.26 95.034 127.18 140.093 329.118 133.608l6.87-.22-.163 6.871c-.982 41.433-3.67 76.604-8.073 105.538-3.67 24.118-9.787 52.141-18.348 84.084Z" stroke="#000" stroke-width="13" fill="#FFF"/>
    <path d="M178.625 188.164c-2.031 0-5.195-.143-9.492-.43-4.14-.286-7.305-.416-9.492-.39.104 2.969.455 8.255 1.054 15.86.547 6.718.82 12.03.82 15.937 0 .885.092 2.2.274 3.945.182 1.745.274 3.06.274 3.945 0 1.953-.417 3.711-1.25 5.274-1.068 2.005-2.592 3.007-4.57 3.007-1.433 0-2.696-.455-3.79-1.367-1.224-1.015-1.836-2.291-1.836-3.828 0-.364.065-.918.196-1.66.13-.742.195-1.309.195-1.7 0-1.197-.085-3.007-.254-5.429-.17-2.422-.254-4.245-.254-5.469 0-3.49-.273-8.216-.82-14.18-.625-6.848-.99-11.575-1.094-14.179h-2.031c-5.808 0-10.417-.417-13.828-1.25-2.891-.703-4.336-2.409-4.336-5.117 0-1.328.468-2.526 1.406-3.594 1.094-1.276 2.526-1.849 4.297-1.719.911.052 2.982.274 6.21.664 2.579.287 4.662.43 6.25.43 1.59 0 3.966-.026 7.13-.078 3.164-.052 5.54-.078 7.129-.078 1.979 0 4.947.137 8.906.41 3.958.273 6.927.41 8.906.41 1.563 0 2.871.508 3.926 1.524 1.054 1.015 1.582 2.265 1.582 3.75 0 1.484-.528 2.74-1.582 3.77-1.055 1.028-2.363 1.542-3.926 1.542Zm63.672-.344c-.521 1.901-.781 3.555-.781 4.961 0 .73-.072 1.856-.215 3.38-.143 1.523-.215 2.649-.215 3.378 0 2.474-.13 6.146-.39 11.016-.261 4.87-.391 8.541-.391 11.015 0 1.901.143 4.74.43 8.516.286 3.776.43 6.615.43 8.516 0 1.432-.509 2.643-1.524 3.632-1.016.99-2.279 1.485-3.79 1.485-1.536 0-2.864-.489-3.984-1.465-1.12-.977-1.68-2.168-1.68-3.574 0-1.901-.084-4.753-.253-8.555-.17-3.802-.254-6.654-.254-8.555 0-1.484.026-2.8.078-3.945-4.089.182-9.14.82-15.156 1.914-5 .912-10 1.836-15 2.774-.053 1.77-.235 4.726-.547 8.867-.26 3.646-.39 6.627-.39 8.945 0 1.432-.509 2.643-1.524 3.633-1.016.99-2.279 1.484-3.79 1.484-1.51 0-2.773-.495-3.788-1.484-1.016-.99-1.524-2.2-1.524-3.633 0-2.63.228-6.562.684-11.797.455-5.234.683-9.167.683-11.797 0-3.333.078-8.353.235-15.058.156-6.706.234-11.726.234-15.059 0-1.432.508-2.643 1.523-3.633 1.016-.99 2.28-1.484 3.79-1.484 1.51 0 2.773.495 3.789 1.484 1.015.99 1.523 2.2 1.523 3.633 0 1.98-.072 4.954-.215 8.926-.143 3.971-.215 6.946-.215 8.926 0 .65-.09 1.9-.273 3.75-.156 1.718-.221 3.033-.195 3.945l15-2.813c5.859-1.041 10.911-1.64 15.156-1.796.104-1.745.273-6.433.508-14.063.052-2.005.664-4.31 1.836-6.914 1.458-3.203 3.112-4.805 4.96-4.805 1.38 0 2.605.456 3.672 1.368 1.146.99 1.72 2.226 1.72 3.71 0 .391-.053.782-.157 1.172Zm40.195 4.008c-1.354 0-5.065-.364-11.133-1.094-.364 4.792-.546 11.16-.546 19.102l-.04 17.539c3.464-.078 6.993-.117 10.586-.117 1.563 0 2.858.52 3.887 1.562s1.543 2.292 1.543 3.75c0 1.459-.514 2.702-1.543 3.73-1.029 1.03-2.324 1.544-3.887 1.544-1.458 0-3.645.032-6.562.097-2.917.066-5.104.098-6.563.098-1.718 0-4.296.228-7.734.684-3.438.455-6.016.683-7.734.683-1.563 0-2.858-.514-3.887-1.543-1.029-1.028-1.543-2.272-1.543-3.73 0-1.459.514-2.709 1.543-3.75 1.029-1.042 2.324-1.563 3.887-1.563 1.77 0 4.101-.195 6.992-.586-.052-3.073-.078-8.958-.078-17.656 0-7.083.26-13.841.78-20.273l-8.476.234c-1.562 0-2.87-.508-3.925-1.523-1.055-1.016-1.582-2.279-1.582-3.79 0-1.536.52-2.786 1.562-3.75.964-.885 2.148-1.393 3.555-1.523 2.291-.208 6.276-.312 11.953-.312 5.104 0 11.68.546 19.726 1.64 3.204.443 4.805 2.24 4.805 5.39 0 1.668-.65 2.983-1.953 3.946a5.868 5.868 0 0 1-3.633 1.211Zm28.633 42.555c-6.615 0-11.823-1.472-15.625-4.414-3.203-2.448-4.805-5.274-4.805-8.477 0-1.64.495-3.001 1.485-4.082.99-1.08 2.356-1.62 4.101-1.62 2.344 0 4.063 1.197 5.156 3.593 1.485 3.203 4.844 4.804 10.079 4.804 4.479 0 8.815-.976 13.007-2.93 4.35-2.004 6.524-4.205 6.524-6.6 0-3.282-1.354-5.443-4.063-6.485-1.927-.755-5.794-1.198-11.601-1.328-4.505-.104-8.542-.95-12.11-2.54-4.817-2.16-7.187-5.26-7.109-9.296.078-5.078 2.786-9.733 8.125-13.965 5.339-4.232 11.224-6.348 17.656-6.348 2.552 0 5.703.586 9.453 1.758 4.662 1.458 6.993 3.138 6.993 5.04 0 1.353-.47 2.551-1.407 3.593-1.041 1.172-2.382 1.758-4.023 1.758-1.224 0-3.053-.26-5.488-.781-2.435-.521-4.278-.782-5.528-.782-3.36.026-6.55.834-9.57 2.422-3.125 1.615-4.688 3.373-4.688 5.274 0 .99.476 1.803 1.426 2.441.95.638 2.377 1.087 4.278 1.348 3.333.182 6.653.364 9.96.547 5.782.442 10.352 2.07 13.712 4.882 3.697 3.125 5.546 7.448 5.546 12.97 0 6.718-3.828 11.809-11.484 15.273-5.833 2.63-12.5 3.945-20 3.945Zm105.234-43.555c-1.354 0-5.065-.364-11.132-1.094-.365 4.792-.547 11.16-.547 19.102l-.04 17.539c3.464-.078 6.993-.117 10.587-.117 1.562 0 2.858.52 3.886 1.562 1.029 1.042 1.543 2.292 1.543 3.75 0 1.459-.514 2.702-1.543 3.73-1.028 1.03-2.324 1.544-3.886 1.544-1.459 0-3.646.032-6.563.097-2.917.066-5.104.098-6.562.098-1.72 0-4.297.228-7.735.684-3.437.455-6.015.683-7.734.683-1.563 0-2.858-.514-3.887-1.543-1.029-1.028-1.543-2.272-1.543-3.73 0-1.459.514-2.709 1.543-3.75 1.029-1.042 2.324-1.563 3.887-1.563 1.77 0 4.101-.195 6.992-.586-.052-3.073-.078-8.958-.078-17.656 0-7.083.26-13.841.781-20.273l-8.476.234c-1.563 0-2.872-.508-3.926-1.523-1.055-1.016-1.582-2.279-1.582-3.79 0-1.536.52-2.786 1.562-3.75.964-.885 2.149-1.393 3.555-1.523 2.292-.208 6.276-.312 11.953-.312 5.104 0 11.68.546 19.727 1.64 3.203.443 4.804 2.24 4.804 5.39 0 1.668-.65 2.983-1.953 3.946a5.868 5.868 0 0 1-3.633 1.211Zm28.633 46.555c-6.614 0-11.823-1.472-15.625-4.414-3.203-2.448-4.805-5.274-4.805-8.477 0-1.64.495-3.001 1.485-4.082.99-1.08 2.357-1.62 4.101-1.62 2.344 0 4.063 1.197 5.157 3.593 1.484 3.203 4.843 4.804 10.078 4.804 4.479 0 8.815-.976 13.008-2.93 4.349-2.004 6.523-4.205 6.523-6.6 0-3.282-1.354-5.443-4.062-6.485-1.928-.755-5.795-1.198-11.602-1.328-4.505-.104-8.542-.95-12.11-2.54-4.817-2.16-7.187-5.26-7.109-9.296.078-5.078 2.787-9.733 8.125-13.965 5.339-4.232 11.224-6.348 17.656-6.348 2.553 0 5.704.586 9.454 1.758 4.661 1.458 6.992 3.138 6.992 5.04 0 1.353-.469 2.551-1.406 3.593-1.042 1.172-2.383 1.758-4.024 1.758-1.224 0-3.053-.26-5.488-.781-2.435-.521-4.277-.782-5.527-.782-3.36.026-6.55.834-9.57 2.422-3.126 1.615-4.688 3.373-4.688 5.274 0 .99.475 1.803 1.425 2.441.951.638 2.377 1.087 4.278 1.348 3.333.182 6.653.364 9.96.547 5.782.442 10.352 2.07 13.712 4.882 3.698 3.125 5.547 7.448 5.547 12.97 0 6.718-3.829 11.809-11.485 15.273-5.833 2.63-12.5 3.945-20 3.945Zm109.102-55.211c-.6 0-1.263-.117-1.992-.352-3.36-1.093-7.461-1.64-12.305-1.64-1.589 0-3.418.104-5.488.312-2.07.209-4.369.521-6.895.938.052 5 .052 9.297 0 12.89 3.958-.963 7.24-1.445 9.844-1.445 4.844 0 9.062.221 12.656.664 3.36.417 5.04 2.188 5.04 5.313 0 1.51-.535 2.773-1.602 3.789-1.068 1.015-2.37 1.523-3.907 1.523-1.354 0-3.385-.104-6.093-.312-2.709-.209-4.74-.313-6.094-.313-1.901 0-5.182.599-9.844 1.797v24.492c0 1.51-.592 2.774-1.777 3.79-1.185 1.015-2.546 1.523-4.082 1.523-1.51 0-2.735-.502-3.672-1.504-.938-1.003-1.406-2.272-1.406-3.809v-44.766c0-1.015.02-2.552.058-4.609.04-2.057.059-3.594.059-4.61 0-1.536.514-2.812 1.543-3.827 1.028-1.016 2.324-1.524 3.886-1.524.99 0 1.862.195 2.618.586 3.02-.52 5.794-.905 8.32-1.152 2.526-.248 4.805-.371 6.836-.371 2.969 0 6.706.612 11.21 1.836 5.652 1.536 8.477 3.32 8.477 5.351 0 1.485-.527 2.76-1.582 3.828-1.054 1.068-2.324 1.602-3.808 1.602Zm44.687 6.656c-1.354 0-5.065-.364-11.133-1.094-.364 4.792-.546 11.16-.546 19.102l-.04 17.539c3.464-.078 6.993-.117 10.586-.117 1.563 0 2.859.52 3.887 1.562 1.029 1.042 1.543 2.292 1.543 3.75 0 1.459-.514 2.702-1.543 3.73-1.028 1.03-2.324 1.544-3.887 1.544-1.458 0-3.645.032-6.562.097-2.917.066-5.104.098-6.563.098-1.718 0-4.296.228-7.734.684-3.437.455-6.016.683-7.734.683-1.563 0-2.858-.514-3.887-1.543-1.029-1.028-1.543-2.272-1.543-3.73 0-1.459.514-2.709 1.543-3.75 1.029-1.042 2.324-1.563 3.887-1.563 1.77 0 4.101-.195 6.992-.586-.052-3.073-.078-8.958-.078-17.656 0-7.083.26-13.841.781-20.273l-8.477.234c-1.562 0-2.87-.508-3.925-1.523-1.055-1.016-1.582-2.279-1.582-3.79 0-1.536.52-2.786 1.562-3.75.964-.885 2.149-1.393 3.555-1.523 2.291-.208 6.276-.312 11.953-.312 5.104 0 11.68.546 19.726 1.64 3.204.443 4.805 2.24 4.805 5.39 0 1.668-.65 2.983-1.953 3.946a5.868 5.868 0 0 1-3.633 1.211Zm68.086 38.563c0 1.302-.221 3.359-.664 6.172-.52 3.359-2.422 5.039-5.703 5.039-1.823 0-3.88-1.03-6.172-3.086-10.026-9.037-21.341-21.706-33.945-38.008-.156 6.77-.235 10.924-.235 12.46 0 2.058.046 5.157.137 9.298.091 4.14.137 7.24.137 9.297 0 7.682-1.875 11.523-5.625 11.523-1.901 0-3.425-.586-4.57-1.758-1.016-1.042-1.524-2.305-1.524-3.789 0-1.042.085-2.617.254-4.726.17-2.11.254-3.685.254-4.727 0-1.537.052-3.841.156-6.914.104-3.073.156-5.378.156-6.914 0-1.64-.039-4.115-.117-7.422-.078-3.307-.117-5.781-.117-7.422 0-1.562-.156-3.893-.469-6.992-.312-3.1-.468-5.43-.468-6.992 0-1.563.67-2.956 2.011-4.18 1.341-1.224 2.871-1.836 4.59-1.836 1.927 0 4.063 1.667 6.406 5 11.823 16.875 23.49 30.638 35 41.29.026-.834.04-2.813.04-5.938 0-12.839-.13-21.498-.391-25.977-.052-.755-.222-2.161-.508-4.219-.26-1.823-.39-3.255-.39-4.297 0-3.593 1.9-5.39 5.702-5.39 4.245 0 6.368 6.55 6.368 19.648 0 .287-.026 2.344-.078 6.172-.157 13.23-.235 21.458-.235 24.688Zm46.602-42.47c-.521 0-1.068-.077-1.64-.233-4.22-1.146-8.321-1.72-12.306-1.72-1.953 0-4.049.157-6.289.47-2.24.312-4.622.78-7.148 1.406 0 3.463-.117 8.606-.352 15.43 1.459-.105 6.55-.586 15.274-1.446 4.974-.495 8.125-.742 9.453-.742 1.536 0 2.851.488 3.945 1.465 1.094.976 1.64 2.272 1.64 3.887 0 3.098-1.653 4.856-4.96 5.273-2.083.156-5.195.417-9.336.781-3.698.417-9.27.925-16.719 1.524-.182 3.307-.273 5.976-.273 8.007 0 5.105.3 8.008.898 8.711.287.339 1.927.508 4.922.508 1.615 0 4.05-.039 7.305-.117 3.255-.078 5.69-.117 7.304-.117.521 0 1.29-.078 2.305-.235 1.016-.156 1.771-.234 2.266-.234 1.51 0 2.8.43 3.867 1.29 1.224.963 1.836 2.317 1.836 4.062 0 2.916-1.523 4.661-4.57 5.234-2.605.495-8.008.742-16.211.742-8.49 0-14.024-1.146-16.602-3.437-2.838-2.526-4.258-7.995-4.258-16.407 0-3.49.254-8.73.762-15.722.508-6.992.762-12.22.762-15.684 0-.911-.13-2.259-.39-4.043-.261-1.784-.391-3.131-.391-4.043 0-3.958 1.822-5.937 5.468-5.937 1.146 0 2.2.325 3.164.976 3.021-.755 5.892-1.321 8.614-1.699 2.721-.378 5.293-.566 7.714-.566 6.563 0 11.81.755 15.743 2.265 2.395.912 3.593 2.565 3.593 4.961 0 1.354-.468 2.552-1.406 3.594-1.042 1.198-2.37 1.797-3.984 1.797Z" id="THIS-IS-FINE" fill="#000"/>
  </g>
</svg>
`);


/**
 * Returns a random position around a position.
 * @param x
 * @param y
 * @param offset
 * @returns {{x: number, y: number}}
 */
function getRandomPositionAroundPosition({x, y}, offset = FIRE_CRAWL_PIXELS) {
    return {
        x: clamp(x + (Math.random() * offset * 2) - offset, offset, window.innerWidth - offset),
        y: clamp(y + (Math.random() * offset * 2) - offset, offset, window.innerHeight - offset)
    }
}

/**
 * Clamps a value
 * @param value
 * @param min
 * @param max
 * @returns {number}
 */
function clamp(value, min, max) {
    return Math.min(Math.max(value, min), max);
}


export default class CalmDog extends Character {

    /**
     * Returns info about the character
     */
    get character() {
        return CHARACTERS.dog;
    }

    /**
     * Hooks up the element
     */
    connectedCallback() {
        super.connectedCallback(template);
        this.isSqueaking = false;
        this.$speechBubble = this.shadowRoot.querySelector("#speech-bubble");
        this.$fires = [];
    }

    /**
     * Handles that a target was clicked.
     * @param {*} e
     * @param {*} $target
     */
    handleDidClickTarget(e, $target) {
        super.handleDidClickTarget(e, $target);
        this.startFireAtPosition({
            x: e.clientX,
            y: e.clientY
        }).then();
    }

    /**
     * Handles the auto trigger.
     * @param $elem
     * @returns {Promise<void>}
     */
    async handleAutoTrigger($elem) {
        await this.startFireAtPosition(getRandomPositionOnElement($elem));
    }

    /**
     * Start fire.
     * @param targetCenter
     * @param depth
     */
    async startFireAtPosition(targetCenter, depth = 0) {

        // Make sure we cant go deeper than the max depth
        // If the user clicks we ignore the max fire count.
        if (depth >= MAX_FIRE_RECURSION_DEPTH) {
            return;
        }

        // Start a fire
        const $fire = createFireElement(targetCenter);
        document.body.appendChild($fire);
        this.$fires.push($fire);

        // Animate it in
        await promisifyAnimation($fire.animate({
            opacity: [0, 1]
        }, {duration: 300, easing: "ease-in"}));

        // Start fire sound
        if (!this.soundbox.isPlaying("fire")) {
            this.soundbox.play("fire", 0.4, true);
        }

        // Every fifth time a fire has been started
        // theres a small chance that the dog will squeak.
        if (!this.isSqueaking && this.$fires.length % 5 === 0) {
            if (Math.random() > (1 - SQUEAK_CHANCE)) {
                this.squeak().then();
            }
        }

        // The stop fire function animates out the fire and allows for more fires to start
        const stopFire = async () => {

            // Remove fire from the array
            this.$fires = this.$fires.filter($f => $f !== $fire);

            // Only remove target and fire if it is still in the dom
            if ($fire.isConnected) {

                // Try to find a target beneath the fire and remove it
                const $target = getElementFromPoint(targetCenter);
                if ($target != null && isDestructible($target) && !$target.classList.contains(BURNING_CLASS)) {
                    $target.classList.add(BURNING_CLASS);
                    await promisifyAnimation($target.animate({
                        opacity: [1, 0]
                    }, {duration: 1000, easing: "ease-out", fill: "forwards"}));

                    $target.remove();

                    // Add one more point
                    this.addPoints(1);
                }

                // Animate out the fire and remove it
                await promisifyAnimation($fire.animate({
                    opacity: [1, 0],
                }, {duration: 500, easing: "ease-out", fill: "both"}));

                $fire.remove();
            }

            // Stop sound if necessary
            if (this.$fires.length <= 0) {
                this.soundbox.stop("fire");
            }
        }

        // Get random time to wait before starting the next fire.
        // The deeper the recursion the more time we wait.
        const ms = 1000 + (Math.random() * 4000) + (depth * 1000) + (this.$fires.length * 200);

        // Only spawn a new fire if we are not at the max depth and if the fire is still connected
        if (this.$fires.length < MAX_FIRE_COUNT) {
            setTimeout(() => {
                if ($fire.isConnected) {
                    this.startFireAtPosition(getRandomPositionAroundPosition(targetCenter), depth + 1)
                }
            }, ms)
        }

        // Always hide the fire after twice ms
        setTimeout(stopFire, ms * 2);
    }

    /**
     * Plays squeak sound and says something.
     */
    async squeak() {
        this.isSqueaking = true;
        this.soundbox.play("squeak", 0.4);

        this.$speechBubble.style.willChange = "transform opacity";
        const animation = this.$speechBubble.animate({
            opacity: [0, 1],
            transform: ["scale(0)", "scale(1)"]
        }, {duration: 500, easing: "ease-out", fill: "both"})

        await promisifyAnimation(animation);
        await wait(5000);
        animation.reverse();
        await promisifyAnimation(animation);
        this.isSqueaking = false;
    }

    /**
     * Detach the dog.
     */
    detach() {
        super.detach();
        this.removeFires();
        this.soundbox.stop("fire");
    }

    /**
     * Remove all fires from the page.
     */
    removeFires() {
        for (const $fire of this.$fires) {
            if ($fire.isConnected) {
                $fire.remove();
            }
        }

        this.$fires = [];
    }
}

defineCustomElement("calm-dog", CalmDog);